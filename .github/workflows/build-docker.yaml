name: Deploy to Azure Container Instances

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: tascaAndreu
  RESOURCE_GROUP: DefaultResourceGroup-ESC
  REGION: eastus
  IMAGE_TAG: ${{ github.sha }}
  CONTAINER_GROUP_NAME: tascaandreu-group

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

        # Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login en Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Convertir nombre del ACR a minúsculas
      - name: Convert ACR name to lowercase
        run: echo "AZURE_CONTAINER_REGISTRY_LOWER=$(echo '${{ env.AZURE_CONTAINER_REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Construir y subir imágenes
      - name: Build and push images
        run: |
          echo "${{ secrets.AZURE_REGISTRY_PASSWORD }}" | docker login ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin
          
          # Construir imágenes
          docker-compose build
          
          # Etiquetar y subir imagen de la aplicación
          docker tag tascaandreu_application ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-app:${{ env.IMAGE_TAG }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-app:${{ env.IMAGE_TAG }}
          
          # Etiquetar y subir imagen de PostgreSQL
          docker tag postgresql_database ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-db:${{ env.IMAGE_TAG }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-db:${{ env.IMAGE_TAG }}
          
          # Etiquetar y subir imagen de Nginx
          docker tag nginx ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-nginx:${{ env.IMAGE_TAG }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-nginx:${{ env.IMAGE_TAG }}

      # Desplegar en Azure Container Instances
      - name: Deploy to ACI
        run: |
          # Eliminar grupo de contenedores existente si existe
          az container delete \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes || true

          # Crear nuevo grupo de contenedores con los tres contenedores
          az container create \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/tascaandreu-app:${{ env.IMAGE_TAG }} \
            --location ${{ env.REGION }} \
            --ip-address Public \
            --ports 8080 80 443 \
            --os-type Linux \
            --restart-policy Always \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
            --environment-variables \
              SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/tascaAndreu \
              SPRING_DATASOURCE_USERNAME=test \
              SPRING_DATASOURCE_PASSWORD=test \
            --command-line "sh -c 'java -jar /app.jar'" \
            --cpu 2 \
            --memory 3.5 \
            --dns-name-label ${{ env.CONTAINER_GROUP_NAME }}-${{ github.run_id }} \
            --acr-identity ${{ secrets.AZURE_ACR_IDENTITY }}

      # Verificar el despliegue
      - name: Verify deployment
        run: |
          echo "=== Detalles del grupo de contenedores ==="
          az container show \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "{FQDN:ipAddress.fqdn, State:provisioningState, Containers:containers[*].name}" \
            --output table

          echo "\n=== Logs de la aplicación ==="
          az container logs \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --container-name tascaandreu_application