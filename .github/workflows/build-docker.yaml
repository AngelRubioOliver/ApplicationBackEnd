name: Deploy to Azure Container Instance

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: tascaAndreu
  CONTAINER_INSTANCE_NAME: tascaandreu
  RESOURCE_GROUP: DefaultResourceGroup-ESC
  REGION: eastus
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Configura Docker Buildx (más eficiente que docker-compose para builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login en Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Convertir nombre del ACR a minúsculas
      - name: Convert ACR name to lowercase
        run: echo "AZURE_CONTAINER_REGISTRY_LOWER=$(echo '${{ env.AZURE_CONTAINER_REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Login en ACR con autenticación mejorada
      - name: Log in to ACR
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }} --expose-token
          echo "${{ secrets.AZURE_REGISTRY_PASSWORD }}" | docker login ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io \
            -u ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password-stdin

      # Construir y etiquetar la imagen directamente (más fiable que docker-compose)
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.CONTAINER_INSTANCE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.CONTAINER_INSTANCE_NAME }}:${{ env.IMAGE_TAG }}

      # Verificación más completa de la imagen en ACR
      - name: Verify image in ACR
        run: |
          echo "Verificando imágenes en el repositorio:"
          az acr repository list --name ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}
          echo "\nTags disponibles:"
          az acr repository show-tags --name ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }} --repository ${{ env.CONTAINER_INSTANCE_NAME }}

      # Despliegue en ACI con comprobación previa
      - name: Deploy to Azure Container Instance
        run: |
          # Eliminar instancia existente si existe
          az container delete \
            --name ${{ env.CONTAINER_INSTANCE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes || true

          # Crear nueva instancia
          az container create \
            --name ${{ env.CONTAINER_INSTANCE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.CONTAINER_INSTANCE_NAME }}:${{ env.IMAGE_TAG }} \
            --cpu 1 --memory 1 \
            --os-type Linux \
            --environment-variables SPRING_PROFILES_ACTIVE=prod \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
            --location ${{ env.REGION }} \
            --dns-name-label ${{ env.CONTAINER_INSTANCE_NAME }} \
            --ports 80 8080

          # Mostrar información de la instancia
          az container show \
            --name ${{ env.CONTAINER_INSTANCE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState,Image:image}" \
            --output table