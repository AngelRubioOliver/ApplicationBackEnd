name: Deploy to Azure Container Instances

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: tascaAndreu
  RESOURCE_GROUP: DefaultResourceGroup-ESC
  REGION: eastus
  IMAGE_TAG: ${{ github.sha }}
  CONTAINER_GROUP_NAME: tascaandreu-group
  APP_IMAGE_NAME: tascaandreu-app
  DB_IMAGE_NAME: tascaandreu-db
  NGINX_IMAGE_NAME: tascaandreu-nginx

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Configura Docker Buildx (més eficient que Docker Compose per a CI/CD)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login a Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Normalitzar nom del ACR
      - name: Convert ACR name to lowercase
        run: echo "AZURE_CONTAINER_REGISTRY_LOWER=$(echo '${{ env.AZURE_CONTAINER_REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Login al Azure Container Registry
      - name: Login to ACR
        run: |
          echo "${{ secrets.AZURE_REGISTRY_PASSWORD }}" | docker login \
            ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io \
            -u ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password-stdin

      # Construir i pujar imatges
      - name: Build and push images
        run: |
          # Build amb Docker Buildx (més ràpid i amb cache)
          docker buildx build \
            --tag ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.APP_IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --file Dockerfile \
            --push .

          # Si tens Dockerfiles específics per a cada servei:
          # docker buildx build -t ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.DB_IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f Dockerfile.db --push .
          # docker buildx build -t ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.NGINX_IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f Dockerfile.nginx --push .

      # Desplegar a ACI (versió millorada)
      - name: Deploy to ACI
        run: |
          az container create \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io/${{ env.APP_IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --location ${{ env.REGION }} \
            --ip-address Public \
            --ports 8080 \
            --os-type Linux \
            --restart-policy Always \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY_LOWER }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
            --cpu 1 \                      # Afegit: 1 core de CPU
            --memory 1.5 \                 # Afegit: 1.5 GB de memòria
            --environment-variables \
              SPRING_DATASOURCE_URL="jdbc:postgresql://postgres:5432/tascaAndreu" \
              SPRING_DATASOURCE_USERNAME="test" \
              SPRING_DATASOURCE_PASSWORD="test" \
            --command-line "sh -c 'java -jar /app.jar'"

      # Verificació del desplegament
      - name: Verify deployment
        run: |
          echo "=== Container Group Details ==="
          az container show \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "{FQDN:ipAddress.fqdn, State:provisioningState, IP:ipAddress.ip}" \
            --output table
          
          echo "=== Application URL ==="
          echo "http://$(az container show \
            --name ${{ env.CONTAINER_GROUP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query 'ipAddress.fqdn' \
            --output tsv)"